error[0020]: types mismatch, wanted `str`, but got `i32`
  --> $DIR/tuple-spread-pats.hash:10:36
 9 |   
10 |   test_spread_correct_type := () -> (name: str, value: i32) => {
   |                                      ^^^^^^^^^ this expects the type `str`
11 |       x := (name = "test", value = 123, bar := 'a');

  --> $DIR/tuple-spread-pats.hash:11:34
10 |   test_spread_correct_type := () -> (name: str, value: i32) => {
11 |       x := (name = "test", value = 123, bar := 'a');
   |                                    ^^^ ...but this is of type `i32`
12 |       (bar, ...rest) := x;

warn: named tuple is coerced into an un-named tuple
  --> $DIR/tuple-spread-pats.hash:11:10
10 |   test_spread_correct_type := () -> (name: str, value: i32) => {
11 |       x := (name = "test", value = 123, bar := 'a');
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the named tuple type `(name = "test", value = 123_i32, bar = 'a')` is being coerced into an un-named tuple
12 |       (bar, ...rest) := x;

  --> $DIR/tuple-spread-pats.hash:12:5
11 |       x := (name = "test", value = 123, bar := 'a');
12 |       (bar, ...rest) := x;
   |       ^^^^^^^^^^^^^^ the coercion occurs here
13 |       rest
   = note: if a tuple type is declared as named, it's usually that field names are important and shouldn't be thrown away.
