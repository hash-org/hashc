info: IR dump:
IR dump for function `reverse_arr` defined at $DIR/arrays.hash:7:16-16:2
reverse_arr := (_1: [i32; 10]) -> () {
    mut _0: ();

    // parameter `arr` -> _1

    _2: usize;	// parameter `i`
    mut _3: bool;
    _4: i32;  	// parameter `tmp`
    _5: usize;
    mut _6: usize;
    _7: (usize, bool);
    mut _8: usize;
    mut _9: usize;
    _10: (usize, bool);
    _11: (usize, bool);

    bb0 {
        _2 = const 0_u64;
        goto -> bb1;
    }

    bb1 {
        _3 = Lt(_2, const 5_u64);
        switch(_3) [false -> bb2, otherwise -> bb3];
    }

    bb2 {
        return;
    }

    bb3 {
        _5 = _2;
        _4 = _1[_5];
        _7 = CheckedSub(const 9_u64, _2);
        assert((_7.1), false, "attempt to compute `const 9_u64 - _2`, which would overflow") -> bb4;
    }

    bb4 {
        _6 = (_7.0);
        _8 = _2;
        _1[_8] = _1[_6];
        _10 = CheckedSub(const 9_u64, _2);
        assert((_10.1), false, "attempt to compute `const 9_u64 - _2`, which would overflow") -> bb5;
    }

    bb5 {
        _9 = (_10.0);
        _1[_9] = _4;
        _11 = CheckedAdd(_2, const 1_u64);
        assert((_11.1), false, "attempt to compute `_2 + const 1_u64`, which would overflow") -> bb6;
    }

    bb6 {
        _2 = (_11.0);
        goto -> bb1;
    }
}


IR dump for function `main` defined at $DIR/arrays.hash:18:9-21:2
main := () -> () {
    mut _0: ();
    _1: [i32; 10];	// parameter `t`
    _2: ();

    bb0 {
        _1 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32, const 7_i32, const 8_i32, const 9_i32];
        _2 = reverse_arr(_1) -> bb1;
    }

    bb1 {
        _0 = ();
        return;
    }
}


