
IR dump for function `print_int` defined at $DIR/operators.hash:3:14-4:2
print_int := (_1: i32) -> () {
    mut _0: ();

    // parameter `k` -> _1


    bb0 {
        _0 = ();
        return;
    }
}


IR dump for function `main` defined at $DIR/operators.hash:6:9-10:2
main := () -> () {
    mut _0: ();
    _1: i32;	// parameter `k`
    _2: i32;
    mut _3: i32;
    mut _4: i32;
    mut _5: i32;
    mut _6: i32;
    _7: bool;
    _8: bool;
    _9: bool;
    _10: bool;
    _11: (i32, bool);
    _12: (i32, bool);
    mut _13: i32;
    _14: (i32, bool);

    bb0 {
        _1 = const 5_i32;
        _6 = const 20_i32;
        _7 = Eq(const 4_i32, const 0_u32);
        assert(_7, false, "attempt to divide `_6` by zero") -> bb1;
    }

    bb1 {
        _8 = Eq(const 4_i32, const -1_i32);
        _9 = Eq(_6, const -2147483648_i32);
        _10 = BitAnd(_8, _9);
        assert(_10, false, "attempt to compute `_6 / const 4_i32`, which would overflow") -> bb2;
    }

    bb2 {
        _5 = Div(_6, const 4_i32);
        _11 = CheckedAdd(_5, const 3_i32);
        assert((_11.1), false, "attempt to compute `_5 + const 3_i32`, which would overflow") -> bb3;
    }

    bb3 {
        _4 = (_11.0);
        _12 = CheckedSub(_4, const 2_i32);
        assert((_12.1), false, "attempt to compute `_4 - const 2_i32`, which would overflow") -> bb4;
    }

    bb4 {
        _3 = (_12.0);
        _13 = Exp(_1, const 2_i32);
        _14 = CheckedAdd(_3, _13);
        assert((_14.1), false, "attempt to compute `_3 + _13`, which would overflow") -> bb5;
    }

    bb5 {
        _2 = (_14.0);
        _0 = print_int(_2) -> bb6;
    }

    bb6 {
        return;
    }
}

