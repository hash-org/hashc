
IR dump for function `main` defined at $DIR/matches_with_guards.hash:3:9-17:2
main := () -> () {
    mut _0: ();
    _1: (i32, i32);	// parameter `t`
    _2: (i32, i32);	// parameter `a`
    mut _3: bool;
    _4: i32;       	// parameter `b`
    mut _5: bool;
    mut _6: i32;
    _7: bool;
    _8: bool;
    _9: bool;
    _10: bool;

    bb0 {
        _1 = (const 1_i32, const 2_i32);
        _2 = &raw _1;
        _3 = Eq((_2.0), const 1_i32);
        switch(_3) [false -> bb1, otherwise -> bb4];
    }

    bb1 {
        switch((_1.1)) [2_i32 -> bb2, otherwise -> bb3];
    }

    bb2 {
        _4 = &raw (_1.0);
        _7 = Eq(const 2_i32, const 0_u32);
        assert(_7, false, "attempt to take the remainder of `_4` by zero") -> bb5;
    }

    bb3 {
        _0 = println(const "something else") -> bb8;
    }

    bb4 {
        _2 = _1;
        _0 = println(const "a.0 == 1") -> bb8;
    }

    bb5 {
        _8 = Eq(const 2_i32, const -1_i32);
        _9 = Eq(_4, const -2147483648_i32);
        _10 = BitAnd(_8, _9);
        assert(_10, false, "attempt to compute `_4 % const 2_i32`, which would overflow") -> bb6;
    }

    bb6 {
        _6 = Mod(_4, const 2_i32);
        _5 = Eq(_6, const 0_i32);
        switch(_5) [false -> bb3, otherwise -> bb7];
    }

    bb7 {
        _4 = (_1.0);
        _0 = println(const "b % 2 == 0") -> bb8;
    }

    bb8 {
        return;
    }
}

