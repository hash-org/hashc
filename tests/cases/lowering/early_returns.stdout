info: IR dump:
IR dump for function `boo` defined at $DIR/early_returns.hash:4:8-14:2
boo := (_1: i32, _2: i32) -> i32 {
    mut _0: i32;

    // parameter `i` -> _1
    // parameter `j` -> _2

    mut _3: bool;
    mut _4: bool;
    mut _5: bool;
    mut _6: bool;
    mut _7: i32;
    mut _8: i32;
    _9: (i32, bool);

    bb0 {
        _3 = Eq(_1, const 0_i32);
        switch(_3) [false -> bb3, otherwise -> bb1];
    }

    bb1 {
        _0 = const 1_i32;
        goto -> bb2;
    }

    bb2 {
        return;
    }

    bb3 {
        _5 = Gt(_1, const 10_i32);
        switch(_5) [false -> bb5, otherwise -> bb4];
    }

    bb4 {
        _4 = const true;
        goto -> bb6;
    }

    bb5 {
        _6 = Gt(_2, const 10_i32);
        _4 = _6;
        goto -> bb6;
    }

    bb6 {
        switch(_4) [false -> bb9, otherwise -> bb7];
    }

    bb7 {
        _0 = const 2_i32;
        goto -> bb8;
    }

    bb8 {
        return;
    }

    bb9 {
        _7 = foo(_1) -> bb10;
    }

    bb10 {
        _8 = foo(_2) -> bb11;
    }

    bb11 {
        _9 = CheckedAdd(_7, _8);
        assert((_9.1), false, "attempt to compute `_7 + _8`, which would overflow") -> bb12;
    }

    bb12 {
        _0 = (_9.0);
        return;
    }
}


IR dump for function `foo` defined at $DIR/early_returns.hash:16:8-26:2
foo := (_1: i32) -> i32 {
    mut _0: i32;

    // parameter `i` -> _1

    mut _2: bool;
    mut _3: bool;
    _4: i32;
    _5: (i32, bool);

    bb0 {
        _2 = Eq(_1, const 0_i32);
        switch(_2) [false -> bb3, otherwise -> bb1];
    }

    bb1 {
        _0 = const 3_i32;
        goto -> bb2;
    }

    bb2 {
        return;
    }

    bb3 {
        _3 = Gt(_1, const 10_i32);
        switch(_3) [false -> bb6, otherwise -> bb4];
    }

    bb4 {
        _0 = const 4_i32;
        goto -> bb5;
    }

    bb5 {
        return;
    }

    bb6 {
        _5 = CheckedAdd(_1, const 1_i32);
        assert((_5.1), false, "attempt to compute `_1 + const 1_i32`, which would overflow") -> bb7;
    }

    bb7 {
        _4 = (_5.0);
        _0 = boo(_1, _4) -> bb8;
    }

    bb8 {
        return;
    }
}


