//
// The Hash programming language standard library sources.
//
// Module: "iter"
// Description:
//
// All rights reserved 2021 (c) The Hash Language authors
//

// Collect into some type C
Collect := <I, C> => trait {
    collect: (I) -> C;
};

// Get the next item of an iterator.
// I is the iterator type.
// T is the element type.
// When next returns None, the iterator has ended iteration.
Next := <I, T> => trait { 
    next: (I) -> Option<T>;
};

// Collect iterator of values into a list
// let collect<I, [A]> where next<I, A>;

RangeIterator := <I> => struct(
    current: I,
    final: I,
    step: I,
);

// Ranges, take some initial bound, max bound and then finally a step
Range := <I> => trait {
    range: (I, I, I) -> RangeIterator<I>;
};


Range ~= impl {
    range := (min: int, max: int, step: int) => {
        if (max <= min || ((min + step) >= max)) {         
            return RangeIterator<int>(current=min, final=min, step=0); // essentially no iterations occur
        };

        // check here if the step is negative and the max isn't, we also
        // return a iterator that has 'zero' iterations
        if ((step < 0) && (max > 0)) {
            return RangeIterator<int>(current=min, final=min, step=0); // essentially no iterations occur
        };

        RangeIterator<int>(   
            current=min,
            final=max,
            step=step,
        )
    };
};

// Turn a container of type C into an iterator of type I
Iter := <C, I> => trait {
    iter: (C) -> I;
};

// Turn a list into an iterator
ListIterator = <A> => struct(
    list: [A], 
    idx: int,
);

Iter ~= impl ListIterator<A> {
    iter :=  (list) => {
        ListIterator<A>(
            list,
            idx=0,
        )
    };
};

Next ~= impl ListIterator<A> {
    next := (iter) => {
        if (iterator.idx == iterator.list.size() - 1) {
            None
        } else {
            idx := iterator.idx;
            iterator.idx += 1;

            Some(iterator.list[idx])
        }
    };
};

// Turn a string into a character iterator
CharIterator := struct(
    idx: int,
    string: str,
);


Next ~= impl CharIterator {
    next := (iterator) => {
        if (iterator.idx == iterator.string.size() - 1) {
            None
        };

        idx := iterator.idx;
        iterator.idx += 1;

        Some(iterator.string[idx])
    };
};

Iter ~= impl CharIterator {
    iter := (string) => {
        CharIterator(
            string=string,
            idx=0,
        ) 
    };
};

// Turn a map into a tuple iterator
MapIterator := <A, B> => struct( 
    keys: [A],
    original: {A: B},
    idx: usize,
);

// Implementation for the map iterator 
Next ~= impl MapIterator<A, B> {
    iter := (iterator) => {
        if (iterator.idx == iterator.keys.size() - 1) {
            return None;
        };

        idx := iterator.idx;
        iterator.idx += 1;

        Some(map[iterator.map[idx]])
    };
};

Iter ~= impl MapIterator<A, B> {
    iter := (map) => {
        // essentially iterate over the keys of a map and just convert into a list of keys
        MapIterator<A, B>(   
            keys = intrinsic_get_keys(map),
            map,
            idx = 0,
        )
    };
};

// Turn a set into a list iterator
SetIterator := <A> => struct( 
    set: [A], 
    idx: usize,
);

// Implementation for the map iterator 
Next ~= impl SetIterator<A> { 
    next := (iterator) => {
        if (iterator.idx == iterator.map.size() - 1) {
            return None;
        };

        idx := iterator.idx;
        iterator.idx += 1;

        Some(set[idx])
    };
};

// Create a set iterator from an iterator
Iter ~= impl SetIterator<A> {
    iter := (set) => {
        // essentially iterate over the keys of a set and just convert into a list of keys
        SetIterator<A>(   
            map = intrinsic_get_keys(set),
            idx = 0,
        )
    };
};

// Skip n elements.
Skip := <I: Next> => trait {
    Self := struct( 
        inner: I, 
        skip: usize, 
        current: usize
    );

    skip := (inner: I, skips: usize) -> Self => {
        // check if the number of skips that are performed will exceed the iterator
        // in this case we can just return None
        Self(
            inner = i,
            skip = skips,
            current = 0,
        )
    };
};

Next ~= impl Skip<I> {
    next := (iterator) => {
        Self(inner, current, skip) := iterator;

        if (skip > current) {
            // increment the count within the inner iterator and set the 'current' value
            // within the skipper
            inner.idx += skip - current;
        };

        next(inner)
    };
};

// First n elements.
First ~= <I: Next> => trait {
    Self := struct(
        elements: I,
        current: usize,
        end: usize,
    );

    first : (I, usize) -> Self<I>;
};

First ~= impl {
    first := (iterator, count) => {
        // call next 'count' many times and collect the items into the first few items
        elements := [];

        while (count > 0) {
            match next(iterator) {
                Some(k) => { elements.append(k); };
                None => break;
            };
            
            count-= 1;
        };


        First(
            elements,
            current = 0,
            end = 0,
        )
    };
};

Next ~= <I> => impl First<I> {
    next := (iterator) => {
        if (iterator.current == iterator.end) {
            None
        } else {
            idx := iterator.current;
            iterator.current += 1;

            Some(iterator.elements[idx])
        }    
    };
};

Last := <I, T> => trait {
    last := (iterator: I, index: usize) -> ListIterator<T> => {
        elements := [];

        // loop through the whole iterator up until the end and the collect the terms
        for i in iterator {
            elements.push(i);
        };

        to_keep := [];

        for x in range(0, elements.size()) {
            if (elements.size() - x <= count) {
                to_keep.push(elements[x]);
            };
        };

        return to_keep.iter();
    };
};


Last ~= impl Last<ListIterator<T>, T> {
    last := (iterator, count) => {
        to_keep := [];

        for x in range(iterator.idx, iterator.list.size()) {
            if (literator.list.size() - x <= count) {
                to_keep.push(iterator.list[x]);
            };
        };

        return to_keep.iter();
    };
};

// Get the nth element.
Nth := <I, T> => trait {
    nth : (I, usize) -> Option<T>;
};

Nth ~= impl {
    nth := (iterator, index) => {
        count := 0;
        result: Option<T>;

        while (count < idx) {
            result = next(iterator);

            match result {
                Some(k) => {
                    continue 
                };
                None => { 
                    return None 
                };
            };

            count += 1;
        };

        result
    };
};

Reverse := <I, T: Next<I, T>> => trait {    
    reverse: (I) -> ListIterator<T> = (iterator) => {
        elements := [];

        for item in iterator {
            elements.push_front(item);
        };

        elements.iter()
    };
};

// Enumerate the iterator.
Enumerate := <I: Next> => trait {
    Self := struct(
        idx: usize,
        item: I,
    );

    enumerate := (iterator) -> Self => {
        Self(
            idx = 0,
            item = iterator
        )
    };
};

Enumerate ~= <I> => impl Next<I> {
    next := (iter: Enumerate<I>) -> Option<(T, usize)> => {
        match next(iterator.item) {
            Some(k) => { 
                idx := iterator.idx;
                iterator.idx += 1;

                Some(idx, k)
            };
            None => None;
        }    
    };
};


// Zip two iterators.
Zip := <A: Next, B: Next> => trait {
    Self := <A: Next, B: Next> => struct(
        first: A,
        second: B,
    );

    zip := (a: A, b: B) -> Self<A, B> => {
        Self(a, b)  
    };
};

Zip ~= <A: Next<X>, B: Next<Y>> => impl Next<(X, Y)> {
    next := (zipper) => {
        left_result  := next(zipper.first);
        right_result := next(zipper.first);


        match (left_result, right_result) {
           (Some(k), Some(t)) => Some((k, t));
           _ => None;
        }
    };
};

// {A: B}
Collect ~= <I, S: Eq ~ Hash ~ Next<I, (A, B)>> => impl {
    collect := (iterator) => {
        new_map: {A:B} = {};

        for (a, b) in iterator {
            new_map[a] = b;
        }

        new_map
    };
};
