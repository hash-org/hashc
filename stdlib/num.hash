//
// The Hash programming language standard library sources.
//
// Module: "num"
// Description: Numerical and mathematical standard library functions.
//
// All rights reserved 2021 (c) The Hash Language authors
//

// PI
pub pi: float = 3.141592653589793;

// Euler's Number
pub exp := 2.718281828459045;

// Exponentiation
Pow := <T> => trait {
    pow : (base: T, exponent: T) -> T;
};

int ~= impl Pow {
    pow := (base, exponent) => intrinsic_pow(base, exponent);
};

int ~= impl Pow {
    pow := (base, exponent) => intrinsic_pow(base, exponent);
};


// Trigonometry
sin   = <T> => (value: T) -> T => intrinsic_sin(value);
cos   = <T> => (value: T) -> T => intrinsic_cos(value);
tan   = <T> => (value: T) -> T => intrinsic_tan(value);
asin  = <T> => (value: T) -> T => intrinsic_asin(value);
acos  = <T> => (value: T) -> T => intrinsic_acos(value);
atan  = <T> => (value: T) -> T => intrinsic_atan(value);
sinh  = <T> => (value: T) -> T => intrinsic_sinh(value);
cosh  = <T> => (value: T) -> T => intrinsic_cosh(value);
tanh  = <T> => (value: T) -> T => intrinsic_tanh(value);
asinh = <T> => (value: T) -> T => intrinsic_asinh(value);
acosh = <T> => (value: T) -> T => intrinsic_acosh(value);
atanh = <T> => (value: T) -> T => intrinsic_atanh(value);

// Logarithm (value, base)
log := <T> => (num: T, base: T) -> T => intrinsic_log(num, base);

// Square root (may be faster than pow(conv(x), 0.5))
sqrt := (num: f64) => intrinsic_sqrt(num);

// Convert degrees to radians
to_rad: (f64) -> f64 = (deg) => (pi/180.0)*deg;
to_rad: (f32) -> f32 = (deg) => (pi/180.0)*deg;

// Convert radians to degrees
to_deg: (f64) -> f64 = (rad) => (180.0/pi)*rad;
to_deg: (f32) -> f32 = (rad) => (180.0/pi)*rad;

// complex numbers
Complex = <I: Add ~ Sub ~ Mul> => struct(
    a: I,
    b: I,   
);
