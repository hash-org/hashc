/// The Hash Compiler Prelude, this defines core language functionality
/// that is expected to be available to all running contexts.

/// This is powerful mechanism that
/// allows for interfacing with code that requires converting from a potentially
/// opaque type into a known type. An example of such code might be to access information
/// about the `&str` type, such as its length or the pointer to its data. To
/// do this, the type `SizedPointer` which is defined in the prelude can be used
/// to transmute the `&str` into a `SizedPointer` and further access information
/// about it. This is done like so:
/// ```ignore
/// SizedPointer(bytes, length) := transmute<SizedPointer>(message);
/// ...
/// ```
///
/// Here, the `message` of string type is transmuted into `SizedPointer` type, This
/// allows for the program to now read the `bytes` and `length` fields of the
/// `SizedPointer` type.
transmute := <T,U> => (item: T) -> U => {
    Intrinsics::transmute(T, U, item)
}

dbg := <T> => (item: T) -> T => {
    Intrinsics::debug_print(T, item)
    item
}


/// The `cast(..)` function is used to cast some value into another
/// type provided that the types are cast compatible.
cast := <T> => (U: Type, item: T) -> U => {
    Intrinsics::cast(T, U, item)
}


#repr_c SizedPointer := struct(&raw u8, usize);

#foreign write := (fd: i32, buf: &raw u8, len: usize) -> isize => { Intrinsics::abort() }

#foreign read := (fd: i32, buf: &raw u8, len: usize) -> isize => { Intrinsics::abort() }

#foreign open := (path: &raw u8, flags: i32, mode: i32) -> i32 => { Intrinsics::abort() }

#foreign close := (fd: i32) -> i32 => { Intrinsics::abort() }

#foreign malloc := (size: usize) -> &raw u8 => { Intrinsics::abort() }

#foreign free := (ptr: &raw u8) -> () => { Intrinsics::abort() }

print := (item: str) => {
    STDIN := 0
    STDOUT := 1
    STDERR := 2

    // data := transmute<_, SizedPointer>(item)
    // write(STDOUT, data.0, data.1)
}

// #dump_ir panic := (item: str) -> ! => {
//     print(item);
//     Intrinsics::abort()
// }
