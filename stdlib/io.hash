//
// The Hash programming language standard library sources.
//
// Module: "io"
// Description: IO internals and function signatures that can be 
// used during a program.
//
// All rights reserved 2021 (c) The Hash Language authors
//


// Error type for all I/O operations.
enum IoErrorType = {
   FileNotFound,
   PermissionDenied,
   AlreadyExists,
   DevBusy,
   DevFull, // Device is full
   EOF, // Failed due to end of file being reached
   IllegalOperation,
   Other,
};

// @Safety: The order of these fields must be preserved since the compiler internally assumes
// this order. Yes it is somewhat dangerous, and the 'IoError' struct will likely get moved into 
// Primitives, but for now: DO NOT TOUCH THE ORDER OF THE FIELDS!
struct IoError = {
    error: IoErrorType,
    message: str,
};

// These mapping is the same as the internal one, so it should be ok to convert.
// the primitive int code into an one of the IoErrorType variants.
let _conv_ioerr_code: (int) => IoErrorType = (code: int) => {
    let ret = match code {
        0 => FileNotFound;
        1 => PermissionDenied;
        2 => AlreadyExists;
        3 => DevBusy;
        4 => DevFull;
        5 => EOF;
        6 => IllegalOperation;
        _ => Other;
    };

    ret
};

let _conv_ioerr_prim: ((int, str)) => IoError = (e: (int, str)) => {
    IoError {
        error   = _conv_ioerr_code(e.first),
        message = e.second,
    }
};

trait _wrap_io = <T> => (Result<T, (int, str)>) => Result<T, IoError>;
let _wrap_io<T> = (res: Result<T, (int, str)>): Result<T, IoError> => match res {
    Err(e) => Err(_conv_ioerr_prim(e));
    Ok(t) => Ok(t);
};

// Send a character to stdout.
let set = (data: char): Result<void, IoError> => {
    let ret = match (#intrinsic_char_set(data) as Result<void, (int, str)>) {
        Err(e) => Err(_conv_ioerr_prim(e));
        Ok(r) => Ok(r);
    };

    ret
};


// Read a character from stdin.
let get: () => Result<char, IoError> = () => _wrap_io<char>(Ok(#intrinsic_char_get()) as Result<char, (int, str)>);

// File opening mode
enum OpenMode = {
   Read, // r
   ReadWrite, // r+ | w+
   Write, // w
   Append, // a
};

enum SeekMode = {
    SeekSet, // begin file offset
    SeekCur, // current handle offset
    SeekEnd, // end of file offset
};

let _mode_to_int = (mode: OpenMode): int => match mode {
    Read => 0;
    Write => 1;
    Append => 2;
    ReadWrite => 3;
};

// Convert a string representation of a mode into a mode enum
let str_to_mode = (mode: str): OpenMode => match mode {
    "r" => Read;
    "w" => Write;
    "a" => Append;
    "r+" | "w+" => ReadWrite;
    _ => unreachable();
};

// A data structure representing a file.
struct File = { 
    handle: Native,
};

// Standard In/Out file handles
let stdin: File = #intrinsic_get_stdin();
let stdout: File = #intrinsic_get_stdout();
let stderr: File = #intrinsic_get_stderr();

// Open a file
let open = (filename: str, mode: OpenMode): Result<File, IoError> => _wrap_io<File>(#intrinsic_open(filename, _mode_to_int(mode)));
   
// Close a file
let close = (handle: File): Result<void, IoError> => _wrap_io<void>(#intrinsic_close(handle));

// Send a character to a file.
let fset = (handle: File, ch: char): Result<void, IoError> => _wrap_io<void>(#intrinsic_fset(handle, ch));

// Read a character from a file.
let fget = (handle: File): Result<char, IoError> => _wrap_io<char>(#intrinsic_fget(handle));

// Send a string to a file, \n terminated.
let fprint = (handle: File, line: str): Result<void, IoError> => _wrap_io<void>(#intrinsic_fprint(handle, line));

// Read a line from a file.
let finput = (handle: File): Result<str, IoError> => _wrap_io<str>(#intrinsic_finput(handle));

// Seek a file.
let fseek = (file: File, position: int, whence: SeekMode): Result<void, IoError> => {
    let whence_mode = match whence {
        SeekSet => 0;
        SeekCur => 1;
        SeekEnd => 2;
    }; // TODO: could make this a seperate function
    
    _wrap_io<void>(#intrinsic_fseek(file, position, whence_mode))
};


// Lines iterator
struct LinesIterator = {
   index: int,
   lines: [str],
};

//let next<LinesIterator, Result<str, IoError>>;
//let flines = (file: File) => LinesIterator;
