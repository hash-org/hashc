//
// The Hash programming language standard library sources.
//
// Module: "list"
// Description: Standard list utilities 
//
// All rights reserved 2021 (c) The Hash Language authors
//

// swap two elements within an array
swap := <A> => (arr: [A], a: usize, b: usize) -> void => {
    temp := arr[a];
    arr[a] = arr[b];
    arr[b] = temp;
};

/* This function takes last element as pivot, places the pivot element at its 
 * correct position in sorted list, and places all smaller (smaller than pivot)
 * to left of pivot and all greater elements to right of pivot */
partition := <A: Ord> => (arr: [A], low: usize, high: usize) => {    
    pivot := arr[high]; // pivot
    i := low - 1; // Index of smaller element and indicates the right position of pivot found so far
    j := low;

    while (low <= high - 1) {
        if (arr[j] < pivot) {
            i+=1;
            swap(arr, i, j);
        }
    };
    
    swap(arr, i + 1, high);
    i + 1
};

quick_sort := <A: Ord> => (arr: [A], low: int, end: int) => {
    /* part is partitioning index, arr[pi] is now at right place */
    if low < high {
        part := partition(arr, low, high);
    
        quick_sort(arr, low, pi - 1);
        quick_sort(arr, part, high)
    } else {
        arr
    }
};



merge := <A: ORD> => (arr: [A], l: int, m: int, r: int) => {
    n1 := m - l + 1;
    n2 := r - m;
 
    /* create temp arrays */
    temp_right := [];
    temp_left := [];
 
    /* Copy data to temp arrays temp_left and temp_right */
    for i in range(0, n1).iter() {
        temp_left[i] = arr[l + i];
    };

    for j in range(0, n2).iter() {
        temp_right[j] = arr[m + 1 + j];
    };

    /* Merge the temp arrays back into arr[l..r]*/
    i := 0; // Initial index of first subarray
    j := 0; // Initial index of second subarray
    k := l; // Initial index of merged subarray
    while (i < n1 && j < n2) {
        if (temp_left[i] <= temp_right[j]) {
            arr[k] = temp_left[i];
            i += 1;
        } else {
            arr[k] = temp_right[j];
            j += 1;
        };

        k += 1;
    };
    
    // copy the remaining left handside 
    while (i < n1) {
        arr[k] = left_temp[i];
        i+=1; k+=1;
    };
    
    // copy the remaining right handside 
    while (j < n2) {
        arr[k] = right_temp[j];
        j+=1; k+=1;
    };

    arr
};
 
/* l is for left index and r is right index of the
sub-array of arr to be sorted */
merge_sort := <A: Ord> => (arr: [A], l: usize, r: usize) => {
    if l < r {
        m := (l + r) / 2;
 
        // Sort first and second halves
        merge_sort(arr, l, m);
        merge_sort(arr, m + 1, r);
 
        merge(arr, l, m, r)
    } else {
        arr
    }
};
