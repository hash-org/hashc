//
// The Hash programming language standard library sources.
//
// Module: "list"
// Description: Standard list utilities 
//
// All rights reserved 2021 (c) The Hash Language authors
//

/* This function takes last element as pivot, places the pivot element at its 
 * correct position in sorted list, and places all smaller (smaller than pivot)
 * to left of pivot and all greater elements to right of pivot */
trait partition = <A> where ord<A> => ([A]) => [A];
let partition<A> where ord<A> = (arr: [A], low: int, high: int) => {
    // swap two elements within an array
    trait swap = <A> => ([A], int, int) => void;
    let swap<A, int, int> = (arr, a, b) => {
        let temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    };
    
    let pivot = arr[high]; // pivot
    let i = low - 1; // Index of smaller element and indicates the right position of pivot found so far
    let j = low;

    while (low <= high - 1) {
        if (arr[j] < pivot) {
            i+=1;
            swap(arr, i, j);
        }
    }
    
    swap(arr, i + 1, high);
    i + 1
};

let quick_sort<A> where ord<A> = (arr: [A], low: int, end: int) => {
    /* part is partitioning index, arr[pi] is now at right place */
    if {low < high} {
        let part = partition(arr, low, high);
    
        quick_sort(arr, low, pi - 1);
        quick_sort(arr, part, high)
    } else {
        arr
    }
};


// Unstable sorting
trait unstable_sort = <A> => ([A]) => [A];
let unstable_sort<[A]> where ord<A> = (arr) => {
    quick_sort(arr, 0, arr.size);
};


let merge<A> = (arr: [A], l: int, m: int, r: int) => {
    let n1 = m - l + 1;
    let n2 = r - m;
 
    /* create temp arrays */
    let temp_right = [];
    let temp_left = [];
 
    /* Copy data to temp arrays temp_left and temp_right */
    for i in range(0, n1).iter() {
        temp_left[i] = arr[l + i];
    }
    for j in range(0, n2).iter() {
        temp_right[j] = arr[m + 1 + j];
    }

    /* Merge the temp arrays back into arr[l..r]*/
    let i = 0; // Initial index of first subarray
    let j = 0; // Initial index of second subarray
    let k = l; // Initial index of merged subarray
    while (i < n1 && j < n2) {
        if (temp_left[i] <= temp_right[j]) {
            arr[k] = temp_left[i];
            i+=1;
        } else {
            arr[k] = temp_right[j];
            j+=1;
        }
        k+=1;
    }
    
    // copy the remaining left handside 
    while (i < n1) {
        arr[k] = left_temp[i];
        i+=1; k+=1;
    }
    
    // copy the remaining right handside 
    while (j < n2) {
        arr[k] = right_temp[j];
        j+=1; k+=1;
    } 

    arr
};
 
/* l is for left index and r is right index of the
sub-array of arr to be sorted */
let merge_sort<A> where ord<A> = (arr: [A], l: int, r: int) => {
    if (l < r) {
        let m = (l+r)/2;
 
        // Sort first and second halves
        merge_sort(arr, l, m);
        merge_sort(arr, m + 1, r);
 
        merge(arr, l, m, r)
    } else {
        arr
    }
};


// Stable sort
trait sort = <A> => ([A]) => [A];
let sort<A> where ord<A> = (arr) => merge_sort(arr);
