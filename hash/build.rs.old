use std::{fs, path::Path};

pub fn get_stdlib_modules(dir: &Path) -> Vec<&'static Path> {
    let mut paths: Vec<&Path> = vec![];

    if dir.is_dir() {
        for entry in fs::read_dir(dir).unwrap() {
            match entry {
                Ok(p) => {
                    let path = p.path();

                    if path.is_dir() {
                        // recurse and get all of the files with the prefix
                        let prefix = Path::new(path.file_stem().unwrap());
                        let result = get_stdlib_modules(path.as_path());

                        for entry in result {
                            paths.push(prefix.join(entry).as_path());
                        }
                    } else if path.is_file() {
                        let file_name = path.file_stem().unwrap();
                        paths.push(&Path::new(file_name));
                    }
                }
                Err(e) => panic!("Unable to read standard library folder: {}", e),
            }
        }
    }

    paths
}

fn main() {
    // load in the standard library files here
    let stdlib_path = Path::new("./../stdlib");

    let paths = get_stdlib_modules(stdlib_path);
}
