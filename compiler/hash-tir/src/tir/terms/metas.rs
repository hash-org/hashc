//! Definitions related to term holes.

use core::fmt;

use crate::tir::{NodeOrigin, SymbolId};

/// A metavariable, or in other words a variable which will be resolved as a
/// term later.
///
/// This is the basis of the type inference mechanism; the type checker will
/// create metas when it does not know something (such as the type of a term),
/// and then it will fill those metas once it has enough information to do so.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum Meta {
    Generated(SymbolId), // generated by the typechecker
    Hole(SymbolId),      // given by the user
}

impl Meta {
    pub fn name(&self) -> SymbolId {
        match self {
            Meta::Generated(id) | Meta::Hole(id) => *id,
        }
    }
}

impl fmt::Display for Meta {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Meta::Generated(id) => write!(f, "!{}", id),
            Meta::Hole(id) => write!(f, "?{}", id),
        }
    }
}

impl Meta {
    pub fn fresh_hole(origin: NodeOrigin) -> Self {
        Meta::Hole(SymbolId::fresh_prefixed("h", origin))
    }
}
