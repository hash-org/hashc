//! Defines interfaces as traits for a code generation backend
//! to implement. The [BackendMethods] trait is the core trait that
//! should be implemented by the code generation context for the
//! backend, and all of the traits should be implemented by the
//! backend itself.
//!
//! The [BackendTypes] trait is used to define the types that are
//! used by the backend, and the [HasCtxMethods] trait is used to
//! provide the backend with the necessary context to perform code
//! generation.

use std::fmt;

use hash_ir::IrCtx;
use hash_pipeline::settings::CompilerSettings;
use hash_repr::compute::LayoutComputer;
use hash_target::{HasTarget, data_layout::HasDataLayout};

use self::{
    constants::ConstValueBuilderMethods, layout::LayoutMethods, misc::MiscBuilderMethods,
    statics::StaticMethods, ty::TypeBuilderMethods,
};
use crate::backend::CodeGenStorage;

pub mod abi;
pub mod builder;
pub mod constants;
pub mod debug;
pub mod intrinsics;
pub mod layout;
pub mod misc;
pub mod statics;
pub mod ty;

/// This trait represents all of the commonly accessed types that a
/// code generation backend is supposed to have. It is used to provide
/// a common interface for when this crate `hash-codegen` converts the
/// IR into the target backend via the [crate::traits::CodeGen] interface.
pub trait BackendTypes {
    /// A value that has been generated by a particular backend.
    type Value: CodeGenObject;

    /// A function that has been generated by the particular backend.
    type Function: CodeGenObject;

    /// A type that has been generated by a particular backend.
    type Type: CodeGenObject;

    /// A basic block structure within the specific backend, used as a
    /// chunk of a generated function with particular control flow
    /// properties.
    type BasicBlock: Copy;

    /// Debug information about a particular scope.
    type DebugInfoScope: Copy;

    /// Debug information about a particular "location" which can be
    /// mapped back to a particular point in the source.
    type DebugInfoLocation: Copy;

    /// Debug information about a particular variable.
    type DebugInfoVariable: Copy;
}

pub trait CodeGenObject: Copy + PartialEq + fmt::Debug {}
impl<T: Copy + PartialEq + fmt::Debug> CodeGenObject for T {}

/// A trait that provides the backend the necessary context to perform
/// code generation.
pub trait HasCtxMethods<'b>: HasDataLayout + HasTarget {
    /// Return a reference to the current [CompilerSettings] for the
    /// workspace.
    fn settings(&self) -> &CompilerSettings;

    /// Returns a reference to the [CodeGenStorage].
    fn cg_ctx(&self) -> &CodeGenStorage;

    /// Returns a reference to the IR [IrCtx].
    fn ir_ctx(&self) -> &IrCtx;

    /// Create a [LayoutComputer] for the current context.
    fn layouts(&self) -> LayoutComputer<'_>;
}

/// The core trait of the code generation backend which is used to
/// generate code for a particular backend.
pub trait BackendMethods<'b>:
    BackendTypes
    + LayoutMethods<'b>
    + MiscBuilderMethods<'b>
    + HasCtxMethods<'b>
    + StaticMethods
    + TypeBuilderMethods<'b>
    + ConstValueBuilderMethods<'b>
{
}

// Dummy implementation for `BackendMethods` for any T that implements
// those methods too.
impl<'b, T> BackendMethods<'b> for T where
    Self: BackendTypes
        + LayoutMethods<'b>
        + MiscBuilderMethods<'b>
        + HasCtxMethods<'b>
        + StaticMethods
        + TypeBuilderMethods<'b>
        + ConstValueBuilderMethods<'b>
{
}

pub trait Codegen<'b>:
    BackendTypes + std::ops::Deref<Target = <Self as Codegen<'b>>::CodegenCtx>
{
    /// The type of the codegen context, all items within the context can access
    /// all of the methods that are provided via [BackendMethods].
    type CodegenCtx: BackendMethods<'b>
        + BackendTypes<
            Value = Self::Value,
            Function = Self::Function,
            BasicBlock = Self::BasicBlock,
            Type = Self::Type,
            DebugInfoLocation = Self::DebugInfoLocation,
            DebugInfoScope = Self::DebugInfoScope,
            DebugInfoVariable = Self::DebugInfoVariable,
        >;
}
