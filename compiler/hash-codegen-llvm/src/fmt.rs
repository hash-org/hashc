//! Utilities for printing LLVM IR for various types that are
//! generated by the compiler.

use hash_reporting::report::{Report, ReportKind};
use hash_source::identifier::Identifier;
use inkwell::values::{AnyValue, FunctionValue};

/// A wrapper for a [FunctionValue] that implements [Report].
pub struct FunctionPrinter<'a> {
    /// The original name of the function before it was mangled.
    name: Identifier,

    /// A pointer to the [FunctionValue] that this report is for.
    value: FunctionValue<'a>,
}

impl<'f> FunctionPrinter<'f> {
    /// Create a new [FunctionReport] for the given [FunctionValue].
    pub fn new(name: Identifier, value: FunctionValue<'f>) -> Self {
        Self { name, value }
    }
}

impl From<FunctionPrinter<'_>> for Report {
    fn from(item: FunctionPrinter<'_>) -> Self {
        let mut report = Report::new();
        report.kind(ReportKind::Info).title(format!("LLVM IR for function `{}`", item.name));

        // Add the body of the function as just a label.
        report.add_empty(item.value.print_to_string().to_string());
        report
    }
}

/// Create an informational report by accepting a string to represent
/// the title of the [Report].
pub(super) fn info_report(title: String) -> Report {
    let mut report = Report::new();
    report.kind(ReportKind::Info).title(title);
    report
}
