
let some_var: int = 3;
let conv<T, str> = (x) => "<unknown>";

// I'm a line comment
struct MyStruct = <T> => {
    field: T,
    other_field: int,
    default_field: float = 6.0e2,
    a_flag: bool,
};


enum Either = <T, A> => {
  Left(T),
  Right(T)
};

/* Multi line - 
    /* nested comment */
    */


/* I am a multi block comment which has multiple lines and 
   can be use as documentation comments for functions, structs, enums,
   etc.
 */
enum MyEnum = <T, Y> => {
    MyVariant(T),
    OtherVariant(int, Y),
    InnerVariant(MyEnum<int, str>, str),
    PointVariant(Point<int>),
    EmptyVariant,
};

let var = 0;
let big_string = "One, two, three";

let func: (int) => str = (x) => conv(x);

let other_func = (t: str) => {
    match t {
        "one" => 1;
        "two" => 2;
        "three" => 3;
        "four" | "five" if var => 4.5;
        alpha if var == 2 => {
            print(alpha)
        };
        _ => -1;
    };

    return alpha;
};

// re-assignment
var=2;

trait conv = <T, E> => (T) => E;

let conv<int, str> = (num) => #intinsic_conv_int_to_str(num);
let push<A> where eq<A> = (arr, item) => #intrinsic_list_add(arr, item);

// if statements!
if (var == 23 || other_var == "value") {
    print("some var");
} else {
    print("not some var");
}

// Struct literal
let d: Point<int> = Point<int> {
    x=2,
    y=3,
};

// another struct literal
let d: Dog = Dog {
    name="Adam",
    age=12.0
};

// references
let my_ref: &[{int:str}] = &my_fn_call();
let my_ref_2: &MyStruct = &(MyStruct { foo = &3 });
let my_ref_3: &Foo = *something(*&3);

let a = [1,2,3,4,5,6,7,8,9,];
let b: {int: char} = {1: '2', 3: '5'};
let c = {1,2,3,4,5,6,7,};
let d = (1,2,3,4,5);

// Import
let {exp, tan} = import("../stdlib/num");

// A character
let ch: char = 'c';

let cool_str: str = "I have e\tcape codes\n\n";

// let other_val = 100_000_000e1;
let hex_val: int = 0x12A12;
let bin_val = 0b1010100001010;
let oct_val = 0o1272170;
let fl_val: float = 6.0e-3;
let flag = false;

let Token { pat } = get_token();

// library imports with specific symbol extraction and symbol renaming
// let {i: func, b: func_ext} = import("mylib");
