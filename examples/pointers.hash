let malloc = (size: usize): &raw void => #intrinsic_malloc(size);

trait free = <T> => (&raw T) => void;
let free<T> = (ptr: &raw T): void => #intrinsic_free(size);

trait size = <T> => () => usize;

trait transmute_ptr = <U, T> => unsafe (&raw U) => &raw T;

struct RefData = <T> => {
    data: &raw T,
    refs: usize,
};

struct Ref = <T> => {
    inner: &raw RefData<T>,
};

trait make_ref = <T> => (T) => Ref<T>;
let make_ref<T> = (contents: T): Ref<T> => {
    let data = transmute_ptr<_, T>(malloc(size<T>()));
    *data = contents;

    let inner = malloc(size<RefData<T>>()));
    *inner = RefData { data, refs = 1 };

    Ref { inner }
};

let increment_ref = (ref: Ref<?>): void => {
    *ref.inner.refs += 1;
};

let drop<Ref<T>> = (ref: Ref<T>): void => {
    *ref.inner.refs -= 1;
    if *ref.inner.refs == 0 {
        free(ref.inner.data);
        free(ref.inner);
    }
};

trait copy = <T> => unsafe (T) => void;

let copy<Ref<T>> = (ref: Ref<T>) => {
    increment_ref(ref);
};

let assign_ref = (ref: Ref<T>, value: T): void => {
    *ref.inner.data = value;
}


let conv<int, str> = unsafe (i: int): str => {
    i.to_string()
};

// Transpiled
let main = () => {
    {
        let ref = make_ref(3);

        let same_ref = ref;
        let third_ref = ref;
    }
    // the data should have been freed now.
};


let f = unsafe () => {

};


let make_map<K, V> = (entries: [MapEntry<K, V>]): Map<K, V> => {

};

struct ArrayData = <T> => {
    length: usize,
    capacity: usize,
    data: &raw T,
};

struct &[T] = <T> => {
    inner: &ArrayData<T>,
    refs: usize,
};

struct [T; N] = <T, N> => {
    el1: T,
    el2: T,
    el3: T,
    el4: T,
    el5: T,
    ...
    elN: T,
}

struct File {
 ..
}

let drop<File> = (file: File) => {
    file.close();
}

error FileError = {
    AccessDenied(a: int),
    OutOfMemory(b: str, d: int),
    FileNotFound(c: [int]),
};

/// Java land

interface Person {
    speak() {
        match self {
            Bob => ..
            .. => ...
        }
    }
    walk() {

    }
}

enum Person {
    Bob(),
}

struct Bob {}

Bob implements Person {
    //implementations
}

void f(x: Person) {
    x.speak()
};


let test = (): Result<(), Error> => {
    let f = try fopen("test");




    match f {
        Ok(_) => {

        }
        Err(err) => return Err(err);
    }


};

function test  () {

}


// Original
let main = () => {
        let x = 4;
        let f = () => {
            return x;
        };

        return f;
};

let f =main();
f()
f()
test(f);

